map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}
server {
   
    listen 4443 ssl;
    listen [::]:4443 ssl;

    add_header Allow "GET, POST, HEAD, PUT, DELETE, PATCH" always;
    if ($request_method !~ ^(GET|POST|HEAD|PUT|DELETE|PATCH)$) {
       	return 405;
    }

    server_name kubevirt-manager.darkfellanetwork.com;
    ssl_certificate /usr/local/openresty/nginx/ssl/tls.crt;
    ssl_certificate_key /usr/local/openresty/nginx/ssl/tls.key;

    root /usr/local/openresty/nginx/html;
    index index.html index.htm;

    location / {
      try_files $uri $uri/ /index.html;
      include /etc/nginx/auth.d/*.conf;
      access_by_lua_block {
        local buffer = require("string.buffer")
        local opts = {
            redirect_uri = os.getenv("OIDC_REDIRECT_URI"),
            discovery = os.getenv("OIDC_DISCOVERY_URL"),
            token_endpoint_auth_method = "client_secret_post",
            client_id = os.getenv("OIDC_CLIENT_ID"),
            client_secret = os.getenv("OIDC_CLIENT_SECRET"),
            ssl_verify = "yes",
            keepalive = "no",
            response_mode=form_post,
            scope = os.getenv("OIDC_SCOPE") or "openid email profile",
            refresh_session_interval = 900,
            iat_slack = 600,
            redirect_uri_scheme = "https",
            logout_path = "/logout",
            redirect_after_logout_uri = "/",
            redirect_after_logout_with_id_token_hint = true,
            post_logout_redirect_uri = os.getenv("OIDC_POST_LOGOUT_URI"),
            accept_none_alg = false,
            accept_unsupported_alg = false,
            renew_access_token_on_expiry = true,
            access_token_expires_in = 3600,
            access_token_expires_leeway = 0,
            force_reauthorize = false,
            session_contents = {id_token=true},
            timeout = 1000,
            timeout = { connect = 500, send = 1000, read = 1000 },
            use_nonce = true,
            revoke_tokens_on_logout = true,
            lifecycle = {
              on_created = handle_created,
              on_authenticated = handle_authenticated,
              on_regenerated = handle_regenerated,
              on_logout = handle_logout
            },
            http_request_decorator = function(req)
              local h = req.headers or {}
              h[EXTRA_HEADER] = 'my extra header'
              req.headers = h
              return req
            end,
            use_pkce = true
        }
        local res, err = require("resty.openidc").authenticate(opts)
        if err then
          ngx.status = 500
          ngx.say(err)
          ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end
          if res.id_token.hd ~= "zmartzone.eu" then
            ngx.exit(ngx.HTTP_FORBIDDEN)
          end
          if res.user.email ~= "hans.zandbelt@zmartzone.eu" then
            ngx.exit(ngx.HTTP_FORBIDDEN)
          end
          ngx.req.set_header("X-USER", res.id_token.sub)
      }
    }

    location /k8s {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization "";
        proxy_pass_request_body on;
        proxy_pass_request_headers on;
       	client_max_body_size 5g;
       	proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_pass http://127.0.0.1:8001/k8s;
    }

    include /etc/nginx/location.d/*.conf;

}

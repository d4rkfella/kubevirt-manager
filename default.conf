map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}
server {
   
    listen 4443 ssl;
    listen [::]:4443 ssl;

    add_header Allow "GET, POST, HEAD, PUT, DELETE, PATCH" always;
    if ($request_method !~ ^(GET|POST|HEAD|PUT|DELETE|PATCH)$) {
       	return 405;
    }

    set_by_lua $server_name 'return ngx.shared.dynamic_config:get("server_name")';
    set_by_lua $ssl_certificate 'return ngx.shared.dynamic_config:get("ssl_certificate")';
    set_by_lua $ssl_certificate_key 'return ngx.shared.dynamic_config:get("ssl_certificate_key")';
    
    server_name $server_name;
    ssl_certificate $ssl_certificate;
    ssl_certificate_key $ssl_certificate_key;

    root /usr/local/openresty/nginx/html;
    index index.html index.htm;

    location / {
      try_files $uri $uri/ /index.html;
      include /etc/nginx/auth.d/*.conf;
      access_by_lua_block {
        local opts = {
            redirect_uri = os.getenv("OIDC_REDIRECT_URI")
            discovery = os.getenv("OIDC_DISCOVERY"),
            token_endpoint_auth_method = os.getenv("OIDC_TOKEN_ENDPOINT_AUTH_METHOD") or "client_secret_post",
            client_id = os.getenv("OIDC_CLIENT_ID"),
            client_secret = os.getenv("OIDC_CLIENT_SECRET"),
            ssl_verify = os.getenv("OIDC_SSL_VERIFY") or "yes"
            keepalive = os.getenv("OIDC_KEEPALIVE") or "no",
            response_mode = os.getenv("OIDC_RESPONSE_MODE") or form_post,
            scope = os.getenv("OIDC_SCOPE") or "openid email profile",
            refresh_session_interval = os.getenv("OIDC_REFRESH_SESSION_INTERVAL") or 900,
            redirect_uri_scheme = os.getenv("OIDC_REDIRECT_URI_SCHEME") or "https",
            logout_path = os.getenv("OIDC_LOGOUT_PATH") or "/logout",
            redirect_after_logout_uri = os.getenv("OIDC_REDIRECT_AFTER_LOUGOUT_URI") or "/",
            redirect_after_logout_with_id_token_hint = os.getenv("OIDC_REDIRECT_AFTER_LOGOUT_URI_WITH_ID_TOKEN") or true,
            post_logout_redirect_uri = os.getenv("OIDC_REDIRECT_URI"),
            accept_none_alg = os.getenv("OIDC_ACCEPT_NONE_ALG") or false,
            accept_unsupported_alg = os.getenv("OIDC_ACCEPT_UNSUPPORTED_ALG") or false,
            renew_access_token_on_expiry = os.getenv("OIDC_RENEW_ACCESS_TOKEN") or true,
            access_token_expires_in = os.getenv("OIDC_ACCESS_TOKEN_EXPIRES_IN") or 3600,
            access_token_expires_leeway = os.getenv("OIDC_ACCESS_TOKEN_EXPIRES_LEEWAY") or 0,
            use_nonce = os.getenv("OIDC_USE_NONCE") or true,
            revoke_tokens_on_logout = os.getenv("OIDC_REVOKE_TOKENS_ON_LOGOUT") or true,
            use_pkce = os.getenv("OIDC_USE_PKCE") or true
        }
        local res, err = require("resty.openidc").authenticate(opts, nil, nil, session_opts)
        
        if err then
            ngx.status = 403
            ngx.say(err)
            ngx.exit(ngx.HTTP_FORBIDDEN)
        end
      }
    }

    location /k8s {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization "";
        proxy_pass_request_body on;
        proxy_pass_request_headers on;
       	client_max_body_size 5g;
       	proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_pass http://127.0.0.1:8001/k8s;
    }

    include /etc/nginx/location.d/*.conf;

}
